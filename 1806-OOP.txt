Example: Date class has three data members or fields or instance variables

class Date:
  """Date class - d,m,y are three fields"""

  def __init__(self):
     self.d = 0
     self.m = 0
     self.y = 0
  
  def is_leap(self):
     return self.y % 4 == 0

# Test the Date class

a = Date()
a.d = 10
a.m = 12
a.y = 2017

print(a.d, a.m, a.y)
if a.is_leap():
   print("Yes")
else:
   print("No!")  

Example-2: Add following methods in Date class (Previous example)

class Date:
  """Date class - d,m,y are three fields"""

  def __init__(self):
     self.d = 0
     self.m = 0
     self.y = 0
  
  def is_leap(self):
     return self.y % 4 == 0
  # Extra methods
  def set(self,d,m,y):
      self.d = d
      self.m = m
      self.y = y

  def indian_format(self):
      return F"{self.d}-{self.m}-{self.y}"

# Test the Date class

x = Date()  # Creates an object and returns memory ref to "x" variable
x.set(10,2,2017)
print(x.indian_format())
x.d = 12  # Update the field
print(x.d)		  # 12
print(x.indian_format())  # 12-2-2017

Example-3: Add "is_valid()" method to Date class
class Date:
  ...
  ...

  def is_valid(self):
        """Date validation"""
        if self.m in [1,3,5,7,8,10,12]:
            return self.d>=1 and self.d<=31
        elif self.m in [4,6,9,11]:
            return self.d>=1 and self.d<=30
        elif self.m == 2:
            return self.d>=1 and self.d<=29 if self.is_leap() \
                   else self.d>=1 and self.d<=28
        return False

# Test the code
z = Date()
z.set(29,2,2001)
print(z.is_valid())

Example-4: Add "next()" and "previous()" method

# Test the code
aa = Date()
aa.set(4,5,2002)
aa.next()
aa.next()
aa.next()
print(aa.indian_format())   # 5/5/2002
aa.set(1,3,2029)
aa.previous()
print(aa.indian_format())   # 28/2/2029

Example-5 Add "day_of_year" to Date class

class Date:
    def __init__(self):
        self.d = 0
        self.m = 0
        self.y = 0

    def is_leap(self):
        return self.y % 4 == 0

    def set(self,d,m,y):
        self.m = m
        self.d = d
        self.y = y

    def indian_format(self):
        return F"{self.d}/{self.m}/{self.y}"

    def is_valid(self):
        """Date validation"""
        if self.m in [1,3,5,7,8,10,12]:
            return self.d>=1 and self.d<=31
        elif self.m in [4,6,9,11]:
            return self.d>=1 and self.d<=30
        elif self.m == 2:
            return self.d>=1 and self.d<=29 if self.is_leap() else self.d>=1 and self.d<=28
        return False
    
    def next(self):
        if self.m in [1,3,5,7,8,10,12]:
            if self.d == 31 and self.m == 12:
                self.d = 1
                self.m = 1
                self.y += 1
    def previous(self):
        pass
    
    def day_of_year(self):
        days = [0,31, 31+28, 31+28+31, 31+28+31+30, 31+28+31+30+31]
        return  days[self.m-1] + self.d + 1 if self.is_leap else 0

# Test - 1 
a = Date()  # Create an object
a.d = 10
a.m = 2
a.y = 2017
print(a.d, a.m, a.y)
if a.is_leap():
    print("It is leap year!")
else:
    print("Not leap")

# Test - 2
x = Date()
x.set(30,1,2000)
print(x.is_leap())
print(x.indian_format())

# Test - 3
z = Date()
z.set(29,2,2001)
print(z.is_valid())


# Test - 4
p = Date()
p.set(20,2,2002)
print(p.day_of_year())
