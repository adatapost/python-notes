class Stack:
  def __init__(self):
    self.items = []
  def push(self, item):
    self.items.append( item )
  def pop(self):
    if len(self.items)==0:
       return None
    return self.items.pop()
  def show(self):
    print(self.items) 

# Test

a = Stack()
a.push("Abc")
a.push("pqr")
a.push("efg")
a.show()
print( a.pop() )
a.show()
print( a.pop() )
a.show()
print( a.pop() )
a.show()
print( a.pop() )
a.show()

Example: Queue class has three methods -- enqueue ( or push), dequeue ( or pop) and show().

class Queue:

  def __init__(self):
    self.items = []

  def enqueue(self, item):
    self.items.append( item )

  def dequeue(self):
    if len(self.items)!=0:
      value = self.items[0]
      self.items.remove(value)
      return value
    return None
  def show(self):
    print(self.items) 

# Test
p = Queue()
p.enqueue(10)
p.enqueue(20)
p.enqueue(30)

p.show()  # [10,20,30]

print( p.dequeue() )  # 10
print( p.dequeue() )  # 20
p.enqueue(50)

p.show()  # [30,50]

print( p.dequeue() )  # 30
print( p.dequeue() )  # 50
print( p.dequeue() )  # None

p.show()  # []

Example - What will be the output?

class Test:
   def __init__(self):
      self.no = 0


# Actions

a = Test()   # A new object will be created and its memory address will be returned
b = a

a.no = 10
b.no = 20

print(a.no, b.no)	# 20  20


Passing objects as parameters and also returns it
=================================================
We can pass object reference as well as return it. The following class Point has add() and sub() methods that perform addition and subtraction of two objects and returns a new object that carries the result.

class Point:
    def __init__(self,x=0,y=0):
        self.x = x
        self.y = y

    def add(self,q):
        """q is an object parameter"""
        # Create temporary object
        t = Point()
        t.x = self.x + q.x 
        t.y = self.y + q.y 
        return t  # Returns a temporary object

    def sub(self, q):
        return Point( self.x - q.x, self.y - q.y)  # Shorten the code
                                                   # Create an object + subtraction
						   #	+ return it
        
    
# Test - 1
p = Point(10,20)
q = Point(20, 40)

r = p.add(q) 
print(r.x, r.y)

s = p.sub(q)
print(s.x, s.y)

s = q.sub(p)
print(s.x, s.y)
 
# Test - 2

k = Point(10,20).add( Point(3,4) )
r = Point(2,3).add( Point(3,4).add(Point(4,5) ))
s = Point(10,20).sub( Point(3,4).add(Point(3,2)))

print(k.x, k.y)
print(r.x, r.y)
print(s.x, s.y)

t = ( Point(2,3).add(Point(3,3) ).sub( Point(1,2) )
print(t.x, t.y)

Example: Returns updated date object in next() and previous() methods in Date class
p = Date(10,10,2010)
q = p.next()

def next(self):
    # Create temp object
   t = Date(self.d, self.m, self.y)
   ....
   return t


 
















