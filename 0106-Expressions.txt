Conditional operator (Ternary operator)
---------------------------------------

 Syntax:  True_Part if "condition" else False_Part

  Python execute "True_part" expression if "condition" is true, execute "False_part"   expression otherwise.   

Example: max-example.py

# Program : Find maxinum number among two value

no1, no2 = 20, 50

max = no1 if no1>no2 else no2  # Expression returns max value
print("Maximum : ", max)

print(no1) if no1>no2 else print(no2)  # Execute a statement

Example: There are three numeric values. Write program to find the maximum among three value.

no1, no2, no3 = 33,4,66

max = no1 if no1>no2 and no1>no3 else  no2 if no2>no1 and no2>no3 else no3

Relational operators
====================
>   >=   <   <=    ==   !=

Logical operators
=================
and  
or 
not   

The python allow us to write mathematical expression using relation operators.

   In C language, we've :  a>b && a>c whereas we can write this expression in
              python as,   a>b and a>c  
                         OR
                           a>b>c  <-- This is mathematical expression

The if statement
=================

The "if" statement has following syntax:

  if condition:
     statement1
     statement.....
  
  [ Simple if statement ]


  if condition:
     statements...
  else:
     statements....

  [ if..else statement ]


  if condition:
     statements...
  elif condition:
     statements...
  elif condition:
     statements...
  else:
      statements...

  [ if.elif..elif... statement]

Example: We've marks of five subjects and display "Fail" if student obtain less than
         35 marks in three or more subjects. Display "ATKT" if student fails in
         one or two subjects, display "Pass" otherwise.

	 Also calculate total, percent and display grade based uopn the percentage.
	 Percent  Grade
	  >=70	  A
          >=60    B
          >=50    C
                  D

marks.py
--------
# Marks of five subjects
english, maths, science, hindi, gujarati = 5,63,2,73,6

fail_counter = 0
if english<35: 
   fail_counter+=1

if maths<35: 
   fail_counter+=1

....
....

total = maths + science + english + science + hindi
per = total / 5

if per>=70:
   print("A")
elif per>=60:
   print("B")
elif per>=50:
   print("C")
else:
   print("D")

Example: We've day, month and year value. Write program to validate the date.

day, month, year = 29, 22, 2018  

# Control or status 
valid = False      

if month==1 or month==3 or month==5 or month==7 \
               or month==8 or month==10 or month==12:
   valid = day>=1 and day<=31
elif month==4 or month==6 or month==9 or month==11:
   valid = day>=1 and day<=30
elif month==2:
   valid = day>=1 and day<=29 if year % 4 == 0 else day>=1 and day<=28

if valid:
   print("Valid Date!")
else:
   print("Invalid Date")

# OR 
print("Valid") if valid else print("Invalid")

Example: Calculate electricity bill amount from given units consumed based upon following formula:
   Units	Rate
   Consumed	Rs.
   First 100	Rs 1.2 per unit
   Next  100    Rs 1.5 per unit
   Next  200    Rs 2.5 per unit
   Next  300    Rs 3 per unit
   above        Rs 4 per unit
e.g units   Amount
    102     100 * 1.2  +  2 * 1.5
    202     100 * 1.2 + 100 * 1.5 + 2 * 2.5
    
Example: Validate the date using conditional operator
Example: We've a valid date (day, month, and year). Write a program to calculate next date. e.g  10-01-2018   =>  11-01-2018
           31-01-2018   =>  01-02-2018
           28-02-2018   =>  01-03-2018
Example: And similarly (above example), calculate previous date
 1-3-2018  => 28-2-2018
 1-2-2018  => 31-1-2018

Example: We've valid date and find the day of the year.
Example: We've valid date and find the remaining day of current year

   10-03-2018       31 + 28 + 10 = ? (day of year)
                    21 + 30 + 31 + 30 .....   (remaining days)
Example: We've date & time (day, month, year, hour, minutes, second). Write statements to calculate time in miliseconds.  Hint : 1 second = 1000 milliseconds.






 
















1
   
 



  


